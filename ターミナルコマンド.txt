cd Desktop/でデスクトップにディレクトリを作れるようにできる = ディレクトリの今いる位置を変えられる。移動できるということ。

mkdir ファイル名でディレクトリを作成

cd ~ ホームディレクトリに移動

新規タグの作成：command + t

タブの移動：command + → or ←

タブを閉じる：command + w

タブの左右分割：commnad + d

タブの上下分割：commnad + shift + d

分割したタブの移動：commnad + [ or ]

検索：command + f

検索にHitした文字をたどる：Command + G（Command + Shift + G）

検索にHitした単語から選択範囲を広げる：tab（Shift + Tab）

touch test.php test.phpというファイルを作成.  docker/test.phpでディレクトリに直接も可

mv test.rb 

rm test.php  test.php ファイルを削除

code 　vscodeを開く　　.を後につけると現在いるディレクトリから開くことができる .ではなくファイル名の指定のほうがいいかもしれない

ls 自分が今いるディレクトリの中の内容が確認できる

pwd 自分が今いるディレクトリが確認できる

echo 'Hello' > ファイル名　 ファイルに書き込む

cat ファイル名　ファイルの中身を確認

git --version gitがインストールされているか確認


# ユーザー名を設定
$ git config --global user.name "github user name"

# メールアドレスを設定
$ git config --global user.email github@example.com

# Git で使用するエディタに Visual Studio Code を指定
$ git config --global core.editor 'code --wait'

# マージする時にファストフォワードされないようにする
$ git config --global merge.ff false

# プルの挙動をリベース型にする
$ git config --global pull.rebase merges

# 設定を確認する
$ git config --list


-----dart sassコマンド(Node.jsインストール後)
①npm init -y    ⬅️package.json生成
②npm install sass　⬅️dart sass生成
③package.json内
  "test": "echo \"Error: no test specified\" && exit 1", ←カンマで区切るのを忘れるな
   "sass": "sass --watch sass:css"
④同じ階層にsass/style.scssを作成
⑤npm run sass⬅️cssファイル生成　sass開始


-----dockerの基本コマンド
docker image 取得
$docker image pull

docker image ビルドの取得
$docker image build

$docker image rm リポジトリ名(イメージの名前)

コンテナ生成
$docker container create

コンテナ起動
$docker container start

コンテナ停止
$docker container stop

コンテナ削除
$docker container rm　 コンテナのID


$docker container run

コンテナ再起動
$docker container restart


-----docker-compose.yml(複数のコンテナを動かす)を使ったコマンド
ビルド
$docker-compose build

生成・起動
$docker-compose up

停止
$docker-compose stop

削除
$docker-compose rm

再起動
$docker-compose restart

停止と削除
$docker-compose down

起動中のコンテナでコマンドを実行
$ docker-compose exec

コンテナの一覧を表示
$docker-compose ps

ログを表示
$docker-compose logs

使用していないコンテナ、イメージなどを削除
$docker system prune



# hello-world イメージからコンテナを生成・起動する(たぶん一番初めにdockerを使う際に行う処理)
docker run hello-world

# イメージの一覧を表示する
docker image ls

# コンテナ（プロセス）の一覧を表示する
docker ps --all

# コンテナを削除する
docker container rm <コンテナID>

# イメージを削除する
docker image rm hello-world


docker-compose up -d 開発環境を起動
↑dockerfileやdocker-compose.ymlなどが揃っている状態なら環境構築や起動して続きをやれる

起動しているコンテナの名前の確認
docker-compose ps --service


PHPコンテナにログイン
docker-compose exec php ash
<下記のログインを忘れないように!>
db コンテナにログイン
①docker-compose exec db　bash

MySQL にログイン
②mysql -u (docker-compose.ymlのMYSQL_USER:????の????の値)　-p (docker-compose.ymlのMYSQL_DATABASE::????の????の値)
③MYSQL_PASSWORD:????の????の値を見えないけどターミナルで入力してENTER
④ターミナルにSQLで書いた内容を流す

(Docker + Laravel)
laravel
curl -s "https://laravel.build/MyBBS" | bash 
でlaravelをインストール？ファイル作成
拡張
EditorConfig for VS Code

Laravel Blade Snippets
.env
APP_PORT=8573
app.php
'timezone' => 'Asia/Tokyo',にする
app/Models/User.phpファイルを削除する
database/migrations/ファイルをすべて削除
vscode上のターミナルで./vendor/bin/sail up -d   ←docker-compose up -dのLaravel版？
dockerを停止したい場合./vendor/bin/sail down

routes/web.phpの中のreturn view(‘任意’); 任意のところを変える
resourcesの中のviews/welcome.blade.phpを任意.blade.phpに変える
publicでcssファイルやjavascriptファイルは生成して使っていく
<link rel="stylesheet" type="text/css" href="css/style.css">のようにそのままのディレクトリとファイル構成の記載でよい

ルーティングごとの処理を置くコントローラーと呼ばれるファイルを作成するコマンド⇩
vendor/bin/sail artisan make:controller ????(コントローラーの名前)

./vendor/bin/sail mysql mybbs で作成してあるmybbsのデータベースに接続

./vendor/bin/sail artisan make:migration create_posts_table 　テーブルを管理するためのMigrationファイルを作成
