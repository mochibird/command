laravel
curl -s "https://laravel.build/MyBBS" | bash 
でLaravelプロジェクトを作成

No such file or directory と表示されたときの対処(OneDriveを使用しているっぽい)
①mkdir laravel (ディレクトリを作成)
②cd laravel
③curl -s "https://laravel.build/MyBBS" | bash 

拡張
EditorConfig for VS Code

Laravel Blade Snippets
.env
APP_PORT=8573
app.php
'timezone' => 'Asia/Tokyo',にする
app/Models/User.phpファイルを削除する
database/migrations/ファイルをすべて削除
vscode上のターミナルで./vendor/bin/sail up -d   ←docker-compose up -dのLaravel版？
dockerを停止したい場合./vendor/bin/sail down

./vendor/bin/sail build *万が一localhostが過去のキャッシュが使われてアクセスできない場合にこのコマンドを使う。その後./vendor/bin/sail up -d

routes/web.phpの中のreturn view(‘任意’); 任意のところを変える
resourcesの中のviews/welcome.blade.phpを任意.blade.phpに変える
publicでcssファイルやjavascriptファイルは生成して使っていく
<link rel="stylesheet" type="text/css" href="css/style.css">のようにそのままのディレクトリとファイル構成の記載でよい

ルーティングごとの処理を置くコントローラーと呼ばれるファイルを作成するコマンド⇩
./vendor/bin/sail artisan make:controller ????(コントローラーの名前)

./vendor/bin/sail mysql mybbs で作成してあるmybbsのデータベースに接続

exit; でデータベースの接続終了



./vendor/bin/sail artisan make:migration  create_posts_table 　テーブルを管理するためのポストをいうMigrationファイルを作成

./vendor/bin/sail artisan migrate フォルダに配置されているファイルの up メソッドを実行してくれる

 ./vendor/bin/sail artisan make:model Post   Modelを作成し、テーブルをPHPのオブジェクトとして扱えるようにする

ーーーテーブルのカラムに値を設定する(1つ目のやり方)
①./vendor/bin/sail tinkerインタラクティブにデータを操作する

②$post = new App\Models\Post(); インスタンス生成の例

③$post->title = 'Title1'; テーブルのカラムに値を設定する例
　　　$post->body = 'Body 1';
　　　$post->save();

ーーーテーブルのカラムに値を設定する(2つ目のやり方)
①class Post extends Model
{
    use HasFactory;

    protected $fillable = [
        'title',
        'body',
    ];
}　　　　　　　　　　　　　　　　　　モデルファイルのクラス内に　protected　の記述をしておく
②./vendor/bin/sail tinker

③App\Models\Post::create(['title'=>'Title 2', 'body' => 'Body 2']); 値を挿入する例


すべて抽出コマンド
 App\Models\Post::all();

特定の id のレコードだけを抽出
App\Models\Post::find(3) (例)

App\Models\Post::orderBy('created_at', 'desc')->limit(3)->get(); 条件を絞った例

4番目のデータを更新する
①$post4 = App\Models\Post::find(4); 

②$post4->title = 'Title updated';

③$post4->save();

5番目のデータを削除する
①$post5 = App\Models\Post::find(5);

②$post5->delete();

独自のRequestクラスを作成し、バリデーション処理
./vendor/bin/sail artisan meke:request PostRequest

オプションを指定してモデルを一気に作る(マイグレーションとコントローラを一緒に作る)
./vendor/bin/sail artisan make:model Comment -mc

