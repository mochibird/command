-----dockerの基本コマンド
docker image 取得
$docker image pull

docker image ビルドの取得
$docker image build

$docker image rm リポジトリ名(イメージの名前)

コンテナ生成
$docker container create

コンテナ起動
$docker container start

コンテナ停止
$docker container stop

コンテナ削除
$docker container rm　 コンテナのID


$docker container run

コンテナ再起動
$docker container restart


-----docker-compose.yml(複数のコンテナを動かす)を使ったコマンド
ビルド
$docker-compose build

生成・起動
$docker-compose up

停止
$docker-compose stop

削除
$docker-compose rm

再起動
$docker-compose restart

停止と削除
$docker-compose down

起動中のコンテナでコマンドを実行
$ docker-compose exec

コンテナの一覧を表示
$docker-compose ps

ログを表示
$docker-compose logs

使用していないコンテナ、イメージなどを削除
$docker system prune



# hello-world イメージからコンテナを生成・起動する(たぶん一番初めにdockerを使う際に行う処理)
docker run hello-world

# イメージの一覧を表示する
docker image ls

# コンテナ（プロセス）の一覧を表示する
docker ps --all

# コンテナを削除する
docker container rm <コンテナID>

# イメージを削除する
docker image rm hello-world


docker-compose up -d 開発環境を起動
↑dockerfileやdocker-compose.ymlなどが揃っている状態なら環境構築や起動して続きをやれる

起動しているコンテナの名前の確認
docker-compose ps --service


PHPコンテナにログイン
docker-compose exec php ash
<下記のログインを忘れないように!>
db コンテナにログイン
①docker-compose exec db　bash

MySQL にログイン
②mysql -u (docker-compose.ymlのMYSQL_USER:????の????の値)　-p (docker-compose.ymlのMYSQL_DATABASE::????の????の値)
③MYSQL_PASSWORD:????の????の値を見えないけどターミナルで入力してENTER
④ターミナルにSQLで書いた内容を流す






# コンテナの起動状態を確認する
docker-compose ps

# 起動していないコンテナのログを確認する
docker-compose logs app
docker-compose logs db
対応したらコンテナを起動します。

# Docker コンテナの起動
docker-compose up -d

# コンテナの起動状態を確認する
docker-compose ps
Dockerfile 周りの対応を行った場合は、イメージから作り直します。

# Docker コンテナの停止・削除
docker-compose down

# Docker イメージのビルド
docker-compose build

# Docker コンテナの起動
docker-compose up -d

# コンテナの起動状態を確認する
docker-compose ps
上記の対応をしてもコンテナが起動しない場合
Docker 関連のファイルが変更されている可能性があるので、初期の状態に戻します。

# dokugaku-engineer/server-side リポジトリをクローンする
git clone https://github.com/dokugaku-engineer/server-side.git

# part 2 のソースコードを任意のディレクトリにコピーする
cp -r sever-side/part2 -t ~/Documents/code

# part2 のディレクトリに移動します
cd  ~/Documents/code/part2
Docker 関連のファイルを初期状態に戻した上で、src ディレクトリに設置していたファイルを、 ~/Documents/code/part2/src にコピーして持ってきます。

それでも起動しない場合
Docker Desktop を再起動します
PC を再起動します
ハードディスクの容量が逼迫したら
不要なイメージ、コンテナなどを削除します。

# Docker の不要なイメージ、コンテナなどを削除する
docker system prune
ポートが重複して起動しない場合
PC を再起動します
ポートを使用しているプロセスを調べて kill します
docker-compose.yml の ports の左側のポート番号を変更します
dbコンテナが起動しない場合
下記のエラーでdbコンテナが起動しない場合

2017-11-20 02:56:52 1 [ERROR] InnoDB: auto-extending data file ./ibdata1 is of a different size 0 pages
 MB) than specified in the .cnf file: initial 768 pages, max 0 (relevant if non-zero) pages!
2017-11-20 02:56:52 1 [ERROR] InnoDB: Could not open or create the system tablespace. If you tried to a
 to the system tablespace, and it failed here, you should now edit innodb_data_file_path in my.cnf back
and remove the new ibdata files InnoDB created in this failed attempt. InnoDB only wrote those files fu
did not yet use them in any way. But be careful: do not remove old data files which contain your precio
2017-11-20 02:56:52 1 [ERROR] Plugin 'InnoDB' init function returned error.
2017-11-20 02:56:52 1 [ERROR] Plugin 'InnoDB' registration as a STORAGE ENGINE failed.
2017-11-20 02:56:52 1 [ERROR] Unknown/unsupported storage engine: InnoDB
2017-11-20 02:56:52 1 [ERROR] Aborting
MySQLの古いデータを削除します。

# MySQLの以前のデータを削除する
rm -rf docker/db/mysql_data
Dockerの不要なイメージ、コンテナ、ネットワーク、ボリュームを削除します。

# Docker コンテナの停止・削除
docker-compose down

# Docker の不要なイメージ、コンテナ、ネットワーク、ボリュームを削除する
docker system prune --volumes
MySQLのデータの同期をやめるために、 docker-compose.yml の下記3行目を削除します

db:
  volumes:
    - ./docker/db/mysql_data:/var/lib/mysql # ← この行を削除します
イメージから作成し直します。

# Docker イメージのビルド
docker-compose build

# Docker コンテナの起動
docker-compose up -d

# コンテナの起動状態を確認する
docker-compose ps
ERROR [internal] load metadata の場合
ERROR [internal] load metadata for docker.io/library load metadata for docker.io/library/php:7.4-apache
といったエラーが出た場合、下記記事を参考に、buildkit を false に設定してみてください。

https://zenn.dev/hiszuk/articles/cb30071df19a1b4f8365
